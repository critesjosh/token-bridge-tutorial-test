{"noir_version":"0.32.0+92ff2fa2e944722e5c3fa43fb3363f093b8f1d12","name":"TokenBridge","functions":[{"name":"claim_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"function_data","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData","fields":[{"name":"selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_private","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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"},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":""},{"name":"claim_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":""},{"name":"get_portal_address","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"function_data","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData","fields":[{"name":"selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_private","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":""},{"name":"exit_to_l1_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_l1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"function_data","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData","fields":[{"name":"selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_private","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":""},{"name":"get_portal_address_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/9VY3W7aMBhNGLS0QIDyUwq94BGSrvu7oxe73aTtAVAKyYREmynAxCZtD7BJe+bVwR898ZzWCFtpLSE7jn3O8fGXL8G2tSmFu5/N2yXoEwuNGfHa3a94GrFckzptjTpt0FkgsUXsEBaB7QKMwfs/oX3G66s49r8PZ7fTYD2MVsthFA6vo9XtdIETf0N7wOuJP58Pl9HQXyyCeDm+8dfj69lyvJj9CLakf3ldFkQWdTn11n15AARiNCYRy+9ta/6r4Hh+j/W9sNLjD+9vb+YIXE3oo3Uf3/0avO1/u/n4dRJNg6vpNA4WKV+LVnpeVlHFK+2A1xPxPqzm81k4C+L369limcI9kOCyNgYarge1yDIEK2UrvX42bsSv3f1K8iSWQFMB1lAE/iPg1xaTrhuyODkU1ivuCXp1BJrKZjR5BtfrMuxjI3t5GdCzir4dCr45MOYYvKwY8tIGbtJE15UMfn2evA4ZXlXBk6pEUzUHT6oZ/Po8eXPJ8GoKntQkmmo5eFLL4NfnyUXyFeEoeOJINDk5eOJk8Gt8dt4xvLqCJ3WJpnoOntQz+DV6kuTYhoInDYmmRg6eIOcuup1nqrv6THU/Fb9Ffo3PTsLfVPCkKdHUzMGTZga/Rk8mDO9EwZMTiaaTHDxBzl10O09Et8iv8bvKZ3gtBU9aEk2tHDxpZfBrjO9XDK+t4ElboqmdgyftDH6NniTf3x0FTzoSTZ0cPOlAH50VxMY1eW5F0EQclqDTEnRWoI3nBV3AKGnT6bq4V13gOzXiy2avxPih61Pz/CHDPjO0NobdN4Od/MejM9kSx+5LfDsHfo0n1R7yEzZxDWAvqR3BWBpHYyhfkH72f5TOKc8fmNcR5jkwpgfz+sI8uqZ9Z/4FvG0y1lRinX0nyr5jD2DeSI+ei7J1nwM14iZx3zPjocfyYddKl4fyaA88NPW+YWeP9F7bnqt/Xkax/yX4FPhTG3i7gmas7Yx14Vk6xoHKWbuh3OYazG2eLLfROogTc8svXjf+t8BCLJpHe0CYmG8G4CnFS89Ke4p4oz3XHPKCfu6CGz5S8B2wh15P7BC9ojZyPXZfNrYPc7qScXjN3hvit0oR7v/htSwuMI/0oK8g4LFc/A+PR1T2Ch8AAA==","debug_symbols":"7dvdaiJBEIbhe5ljWfqnqqs7t7Isi0nMIoiGaBYWyb2vbpwxMoMehDczs3oUJinLrwse6EDNtnqc3b/++jlfPq3W1d33bbVYPUw389Vy97St3Lf875fr5+ly/7zeTF821Z2bVLPl4+7n26R6mi9m1Z3q26RVVlQPhcWsKfW+dNRKDOlQLDFqU73/YKs4iZZDcRI7Kf4x2YUunwjtXQyHSu9UvjK2d58ZdvHH2Hohtg9O6uqQ3PnYloodis3EtWN7JvZ780A2j2RzIZsr2TyRzY1snsnmBWweHNmcFBpIoYEUGkihgRQaSKGBFBpIoYEUGkmhkRQaSaGRFBpJoZEUGkmhkRQaSaGRFCqkUCGFCilUSKFCChVSqJBChRQqpFAhhSopVEmhSgpVUqiSQpUUqqRQJYUqKVRJoYkUmkihiRSaSKGJFJpIoYkUmkihiRSaSKFGCjVSqJFCjRRqpFAjhRop1EihRgo1UmgmhWZSaCaFZlJoJoVmUmgmhWZSaCaFZlJoIYUWUmghhRZSaCGFFlJoIYUWUmghhRZSqHcO7Y7uLDh0acGhWwtO0O7o3oJDFxccurng0NUFh1r1qFV2v4hdMGI3jLpXjLxY8zl1dv47vPmm2D5+Scwd1aq5XgXTFEJT3bk3phKbYknxfHE2rRfpcnb+Y/HhrHpFZ01XdFa7orPmKzpruZ6zdi/v/adn9V9+VgvHs16Ib7lOb+XYOGiTPow6fRx1ehl1eh11+jTq9Dbq9HnQ6VNs0qeT9B3/kMT6/ZWSyoVa09z0Pb5FE6QeSrkNpTWU6G5DaQ9l2BeOnoYy7HtMT0MZ9vWop6HIbSjtoQz7MtfTUIZ9R+xpKMO+evY0lNuN9mQou4ff05f59H4x2782v//b6/Khfot+97j58/z+l13tXw=="},{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"portal_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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"},{"name":"get_token","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/+2c20/bMBjFk9JyS5q2tGUt1wCDvaaUy/YGD3tl0vYyaU+FphMao1MLE/vvh9N8cGo5lSNsEktEQnUS+zs/H1/qmKi2NTkKj392nC7BNf6gPGfxZ/Cyo6MwVqCT01bIaQNngWCLeIGrBKaxofB+CCft+PN8NOr9869v++GDP7y/84cD/3J4f9sfP5X8FScWOaWiqup+DLrzIMB3qag28b2nz/jPwfzxPXZtzprOv/B8e1KG06rBNar38uNfNU73/v7+8udq2A/P+/1ROB6jq0VrulzSIRuvlCJei493cX9zcz24DkefH67Hd1Nx5wVxWbpgTXteFLCIhjk7Fq3p+rN8Z/F58LIjGk4lYCpAHYqgvwT6yvpkEAxYP1ng6su3CXq1BEyLepg6GusbsNjLWtryKKSxir4tcL55kGcZvHQ0eWmDNjHRuZOgr86TkwGL50p44gqY3Aw8cRP01XlyesTilSU8KQuYyhl4Uk7QV+fJYbQU8CQ88QRMXgaeeAn6CsfOJxavIuFJRcBUycCTSoK+Qk+iObYq4UlVwFTNwBPUTMPtGcrtGsqdF795fYVjJ9KvSXhSEzDVMvCklqCv0JMrFm9FwpMVAdNKBp6gZhpuLyfcvL7CdVWPxatLeFIXMNUz8KSeoK+wfx+zeA0JTxoCpkYGnjQS9BV6Eq2/mxKeNAVMzQw8acI12isYaWfqBA7HRBoWx2lxnA6kcb9gFWKUlHEGAbbVKui90+LLpK34/kPn7/TrD1jstqa6sdhremJHz3jrcaxSHHtN4NsG6Cvcbu6gPsUmrXVoS0oPIS/lozw0XxA/ex6lfcqNGeWaXDkP8rSg3BpXjs6p3Zl/YZzW2ddk+jpbJ4rWsbjHq7odcY+Unc+BL6SvZw+xG82Lq9b0Ibtnquv7Q/eeKfYvhXumJyxei/NtlfPNgzw4T7Q0eTnru7iVoK9wHRut2doSnrQFTLq+F2Z5gpppuCs54eb1Fa41u6K5XOTJmoBJ0/fwTE9QMw23ayi3Zyi3Yyh3xVDuck64eX2Fc9Upro9nebIuYFrPwBPUTMNdN5TbzQk3r6+uDx4PRM9MIk82BEwbGXgy61lvFrdrKLeTE25eX+E8eMnibUp4silg2szAE9RMw103lLtiKHfZUO62odxVQ7nf+vfrcjuGcpvaT2o54eb1Fe7hRe9ubUl4siVg2srAE9RMw13OCTevr3A9eMjibUt4si1g2s7AE9RMw103lLtsKHfbUO6qody1N+5X5TZ1PmkYyp2XeZDXV7iuiv6f5kt44guY/Aw8QU0/BbdrKHfVUG5T/fYM5W4bym1q/669cb8q92ZOuNk1elfuh62bqdtJ+86wH386kF4C73Yghup3hklvB/R2tfgyaSuf84DOd7Xrd6N3+N5rqhuLva8ndvTO8EEci94Z3hf49gH0bcXtdsDFJq0DaEtKf7ef81I+ykPzBfGz9fpenEZ+vpzPlfMgzx6U2+fK0Tm1O/PvAuYAXX1Npq/jO8Md65lpDsqdKeGZ9E9d45rNW/PW9DFrvsM+u6OJif2uAD3DPv1mxre74aj3M/wa9vo26PK/l4GfdkK9CnBtTpAuWOKD1XlPT521zm84tmgOonqQJo63QWxUVeCBaJxSG1BMNi9QP6G8rJ9Rf9mFa+Q13WNj6j9N8uWZy0gAAA==","debug_symbols":"5ZzdaltHFEbfRdemzHx79vz4VUopTuIUg5FD7BSKybtXbiQ5xSJhEb6A4itz7NnDHC/WzWI4j5t3128+/fXnzfb93f3m8vfHze3d26uHm7vt7ulxU36b//3y/sPV9un5/uHq48Pmslxsrrfvdj8/X2ze39xeby4zP1+8WLYy9wvXGMelta4Ta1uo7xe3iDyufhp8sbi3XPvFvY3/Lf7jYnfo9QOHriW0X1lLtp957Fp+5J+96vOx8zvHrirtsFq9fPvYo6+xXzxGKy+PXT3H/rK5nJuHc/Pm3Dydm3fn5sO5+XRuvoybqzg3dxoqp6FyGiqnoXIaKqehchoqp6FyGhpOQ8NpaDgNDaeh4TQ0nIaG09BwGhpOQ8NpaHMa2pyGNqehzWlocxranIY2p6HNaWhzGtqchqbT0HQamk5D02loOg1Np6HpNDSdhqbT0HQa2p2Gdqeh3WlodxranYZ2p6HdaWh3GtqdhnanocNp6HAaOpyGDqehw2nocBo6nIYOp6HDaehwGjqdhk6nodNp6HQaOp2GTqeh02nodBo6nYZOp6HLaehyGrqchi6noctp6HIaupyGLqehy2nochpaS7Hubr2zUKyXFor11kJp1t2t9xaK9eJCsd5cKNarC8XqarW66r1f5L1g5L1hBK4Y7QeSDnQ6MOjApAMLDoCrNfuBSgdEB4IOUNKipEVJi5IWJS1KOijpoKSDkg5KOijpoKSDkg5KOijpoKQbJd0o6UZJN0q6UdKNkm6UdKOkGyXdKOmkpJOSTko6KemkpJOSTko6KemkpJOS7pR0p6Q7Jd0p6U5Jd0q6U9Kdku6UdKekByU9KOlBSQ9KelDSg5IelPSgpAclPSjpSUlPSnpS0pOSnpT0pKQnJT0p6UlJT0p6UdKLkl6U9KKkFyW9KOlFSS9KelHSC5JWKXSg0gHRgaADjQ4kHeh0YNCBSQco6UpJV0q6UtKVkqaNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG1nQRha0kQVtZEEbWdBGFrSRBW1kQRtZ0EYWtJEFbWRBG1nQRha0kQVtZEEbWdBGFrSRBW1kQRtZ0EYWtJEFbWRBG1nQRha0kQVtZEEbWdBGFrSRBW1kQRtZ0EYWtJEFbWRBG1nQRha0kQVtZEEbWdBGFrSRBW1kQRtZ0EYWtJEFbWRxupHlmnM/00uZX4+d+ERlLYevTtaa9bi4Rj2xOnMeVmeXjqtPftAyWxwXtx7fXjxHHr7wOWepXy/ev+t8Re+6Xs+7no6qv+i71lf0rnpF7xo//V2Hnt/1O8evtT9vPfpx8a7UH87fzvz8eebn72d+/nHm559nfv51tuffPf199fHm6s3t9dOn8J/++Gn79vBl/N3jwz8fvvxlt/Zf"},{"name":"_assert_token_is_same","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"5dzhah5HFoThe9Fvs8yc03W627eyLIuSOIvAyCFWFoLJvUdOPskOFjFvOSeg+JeRPT3M56oC8TDSu6vvXn3z0//+e3P7/Zu3Vy///e7q9Ztvr+9u3tzef/Xu6vjX+u0v3/5wffv+67d31z/eXb08Xly9uv3u/s9fXlx9f/P61dVL6ZcXn1y2pcuFe87HS89zP3HtyKjLxSNTj1e/P/jJxTW0LxfXmH+4+D8v7h96f8FDn0fG5crz0Pg7H/s8vuQ/e58fHlufeewzjvFwddTx5489a8/LxXOO49PHPnse+/ebR+fNs/Pmo/Pm6rx5dd58dt58dd58N948js6bdy40OhcanQuNzoVG50Kjc6HRudDoXGh0LjQ7F5qdC83OhWbnQrNzodm50OxcaHYuNDsXmp0LHZ0LHZ0LHZ0LHZ0LHZ0LHZ0LHZ0LHZ0LHZ0LHZ0LVedC1blQdS5UnQtV50LVuVB1LlSdC1XnQtW50OpcaHUutDoXWp0Lrc6FVudCq3Oh1bnQ6lxodS50di50di50di50di50di50di50di50di50di50di50dS50dS50dS50dS50dS50dS50dS50dS50dS50dS50dy50dy50dy50dy50dy50dy50dy50dy50dy50dy70PI7Wu7e+s3C0vrRwtL61cIzWu7e+t3C0vrhwtL65cLS+unC0bvVs3Wrv+0W9Lxj1vmH0Ra8YjbEe3kYbY394P+/pV9fqfLhtVejjiy+P8iXD/mvfogOvL10OTHpg0QMbHgCvA10OnPRA0ANJDwx6QPQATTpo0kGTDpp00qSTJp006aRJJ006adJJk06adNKkkyY9aNKDJj1o0oMmPWjSgyY9aNKDJj1o0oMmLZq0aNKiSYsmLZq0aNKiSYsmLZq0aNJFky6adNGkiyZdNOmiSRdNumjSRZMumvSkSU+a9KRJT5r0pElPmvSkSU+a9KRJT5r0okkvmvSiSS+a9KJJL5r0okkvmvSiSS+a9KZJb5r0pklvmvSmSW+a9KZJb5r0pklvmHQcBz1w0gNBDyQ9MOgB0QNFD0x6YNEDNOmTJn3SpE+a9EmTPmnSJ02aGllQIwtqZEGNLKiRBTWyoEYW1MiCGllQIwtqZEGNLKiRBTWyoEYW1MiCGllQIwtqZEGNLKiRBTWyoEYW1MiCGllQIwtqZEGNLKiRBTWyoEYW1MiCGllQIwtqZEGNLKiRBTWyoEYW1MiCGllQIwtqZEGNLKiRBTWyoEYW1MiCGllQIwtqZEGNLKiRBTWyoEYW1MiCGllQIwtqZEGNLKiRBTWyoEYW1MiCGllQIwtqZEGNLKiRBTWyoEYW1MiCGllQIwtqZEGNLKiRBTWyoEYW1MiCGllQIwtqZEGNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmRJTWypEaW1MiSGllSI0tqZEmNLKmR5dNGVvN8+LXyNT/6YTE99ZNl53k8/O7y89T5ePGZ5xNXS+vhalXE49VP/hyaRj5ePCr//OI19fATbmsd58cXXz7r+oo+6/5qPut4GlX/oZ/1/Io+a3xFnzX/9s8648Nn/czjn2d9uPWsx4tD9fD845k/v57589czf/75zJ9/PfPn38/7+c/Pfw8w9Mm3v+M8vWPhHUvv2PCOyTtW3rHpHVvesW0dC68l4bUkvJaE15LwWhJeS8JrSXgtCa8l4bUkvZak15L0WpJeS9JrSXotSa8l6bUkvZak15LhtWR4LRleS4bXkuG1ZHgtGV5LhteS4bVkeC2R1xJ5LZHXEnktkdcSeS2R1xJ5LZHXEnktKa8l5bWkvJaU15LyWlJeS8prSXktKa8l5bVkei2ZXkum15LptWR6LZleS6bXkum1ZHotmV5LlteS5bVkeS1ZXkuW15LltWR5LVleS5bXkuW1ZHst2V5LtteS7bVkey3ZXku215LttWR7LdlWS3Qc3rHTOxbesfSODe+YvGPlHZveseUd81ri2as8e5Vnr/LsVZ69yrNXefYqz17l2as8e5Vnr/LsVZ69yrNXefYqz17l2as8e5Vnr/LsVZ69yrNXefYqz17l2as8e5Vnr/LsVZ69yrNXefYqz17l2as8e5Vnr/LsVZ69yrNXefYqz17l2as8e5Vnr/LsVZ69yrNXefYqz17l2as8e5Vnr/LsVZ69yrNXefYqz17l2as8e5Vnr/LsVZ69yrNXefYqz17l2as8e5Vnr/LsVZ69yrNXefYqz17l2as8e5Vnr/LsVZ69yrNXefYqz17l2as8e5Vnr/LsVZ69yrNXefYqz17l2as8ey3PXsuz1/LstTx7Lc9ey7PX8uy1PHstz17Ls9fy7LU8ey3PXsuz1/LstTx7Lc9ey7PX8uy1PHstz17Ls9fy7LU8ey3PXsuz1/LstTx7Lc9ey7PX8uy1PHstz17Ls9fy7LW4vd5/8f/rH2+uv3n96u39kff/9tPtt3c3b24vX979/MPv/3J/7a8="},{"name":"exit_to_l1_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_l1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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W1MHW1MHW1MHW1MHW1MPtqYebE092Jp6sDX1YGvqwdbUg62pB1tTD7amHmxNnWxNnWxNnWxNnWxNnWxNnWxNnWxNnWxNnWxNnWxNPdmaerI19WRr6snW1JOtqSdbU0+2pp5sTT3ZmnqSNfXblyDTOSLr6s0RWVlvjsjaenNEVtebI7K+3hyRFfbmiKyxN0dklb05outsoetsoetsoetsoetsoetsoetsoetsoetsoetsoevsTtfZna6zO11nd7rO7nSd3ek6u9N1dqfr7E7X2Z2us5Wus5Wus5Wus5Wus5Wus5Wus5Wus5Wus5Wus5Wus42us42us42us42us42us42us42us42us42us42us52us9le17g5outstlc2bo7oOpvttY2bI7rOZnt14+aIrrPZXt8oje0Fjpsjus5me4nj5oius9le5Lg5outstpc5bo7oOpvthY6bI7rOZnup4+boGT4H4uRzRTZTymjKGE3xfVTNZorvs2o2U4PRVDKamoSmnuEzCJ9gShhNMTZ6MjZ6MjZ6MjZ68n26z2aK7+N9NlN8n++zmeL7oDZpk++T2jZTfB/Vtpni+6y2zRTfh7VtpozRFN/HtW2mGBt9Mjb6ZGx0wo/eFCH87M3NFGGjC+Gnb26mCBt9+2U5oynCRhfCT+DcTBE2uhB+BudmirHRhbHRhbHRhbHRhbHRhbHRhbHRhbHRhbHRhbHRhbHRO2OjX/K5o0MembJ5ZursZ57SndFUMJoajKaS0dQkNKWN0ZQwmuqMppTRFGOjK2OjK2OjK2Oj6zM0+umti05CU9YYTQmjqc5oShlNGaMpZzQVjKYGoynGRjfGRnfGRnfGRnfGRnfGRnfGRnfGRnfGRnfGRnfGRnfGRg/GRg/GRg/GRg/GRg/GRg/GRg/GRg/GRg/GRg/GRh+MjT4YG30wNvolr1oL991UzM//meclr1q73FQympqEpi551drlpoTRVGc0pYymjNGUM5pibPRkbPRkbPRkbPT5DI1+eusyhdFUZzSljKaM0ZQzmgpGU4PRVDKamnymeiNs9N4IG703wkbvjbDReyNs9N4IG703wkbvjbDReyNs9N4YG10YG10YG10YG10YG10YG10YG10YG10YG10YG10YG70zNnpnbPTO2OidsdE7Y6Mfv2qt57z9rrNPbx831cf+BrF9+CNLkgenZ+bNUev3V3Juv/Y/OBw5Hw7HlPvZbLv9yWx/pD0cHtOP7B+/Eq6Ofaltv9e2r7XtG7X9Ebv9OLTvte1Hbfujtn3q1T23z726Z/aNe3V3+9kOi9O4V/fUPvfqjtv9dUo7tM+9ujFP7HOv7ql97tU9tU+9utlvt2yph99tGfXqntunXt1z+9Sre2rfqVc3583+bIfRderVPbdPvbrn9qlX99w+9eqe26de3ftHTs123Dzcq3tqn3t1T+1zr+6pfe7VPbMf3Kt7ap97de/2j+/3g3t103f7h9+qB/fqjjyxz726p/a5V/fUPvfqntrnXt1T+9yre2qfe3XP7I8Let99P+xu79m/qShExSAqDlEJiMoF1eH7j9G3G2g5VEmIykSoZIOoCETliuzvd2bbDbweqihExSAqDlEJiMqAqCREZSJUZoOoCETliuyH3xumH6ooRMUgKg5RCYjKgKgkRGUCVLQ1iIpAVDpERSEqBlFxiEpAVAZEJSEqkOwLJPsCyb5Asi+Q7Ask+wLJvkCyL5DsCyT7Asl+h2S/X5D92LGW7bch7VClQ1QUomIQFYeoXJD90LuKzUOVAVFJiMpEqFzxmqcnqAhEpUNUFKJiEJUrsi96z74cqgREZUBUEqIyESpXvPLiCSoCUekQFYWoGEQFkn2DZN8g2TdI9g2SfYdk3yHZd0j2HZJ9h2TfIdl3SPYdkn2HZN8h2Q9I9gOS/YBkPyDZv4KQjNF2lRGHKg5RCYjKgKgkROWK7O/vX91HO/w7NhpERSAqHaKiEBWDqDhEJSAqA6JyRfZ93rM/DlUmQuUKru8JKgJR6RAVhagYRMUhKgFRGRAVSPYTkv0Jyf6EZH9Csj8h2Z+Q7E9I9ick+xOS/QnJ/kRk31qDqAhEpUNUFKJiEBWHqAREZUBUEqICyb5Asi+Q7Ask+wLJvkCyL5Dsy+Lsb3/678ufXr381/ff/rz9N2//5S+v//3m1Q+vH/745n8/vvs329n/Aw=="},{"name":"_call_mint_on_token","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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"}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"TokenBridge::exit_to_l1_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::exit_to_l1_private_parameters","fields":[{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}},{"name":"caller_on_l1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"TokenBridge::get_portal_address_public_abi","fields":[{"name":"return_type","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"TokenBridge::claim_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::claim_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"message_leaf_index","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"TokenBridge::exit_to_l1_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::exit_to_l1_public_parameters","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}},{"name":"caller_on_l1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"TokenBridge::get_portal_address_abi","fields":[{"name":"return_type","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"TokenBridge::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::constructor_parameters","fields":[{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"TokenBridge::get_token_abi","fields":[{"name":"return_type","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"TokenBridge::_assert_token_is_same_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::_assert_token_is_same_parameters","fields":[{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"TokenBridge::_call_mint_on_token_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::_call_mint_on_token_parameters","fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"TokenBridge::claim_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::claim_private_parameters","fields":[{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"pending_shields","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}}]},{"kind":"struct","fields":[{"name":"token","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"portal_address","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}]}]}},"file_map":{"23":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_16_hint(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Take hints of the decomposition\n        let (xlo, xhi) = decompose_hint(x);\n\n        // Range check the limbs\n        xlo.assert_max_bit_size(128);\n        xhi.assert_max_bit_size(128);\n\n        // Check that the decomposition is correct\n        assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n        // Assert that the decomposition of P is greater than the decomposition of x\n        assert_gt_limbs((PLO, PHI), (xlo, xhi));\n        (xlo, xhi)\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else  {\n        // Take a hint of the comparison and verify it\n        if lt_32_hint(a, b) {\n            assert_gt(b, a);\n            false\n        } else {\n            assert_gt(a, b);\n            true\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"24":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field/mod.nr"},"27":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constraint the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::from_slice(domain_generators.as_slice());\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    crate::assert_constant(starting_index);\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = crate::field::bn254::decompose_hint(scalar);\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n","path":"std/hash/mod.nr"},"32":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"34":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"43":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"49":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::unsafe::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n","path":"std/slice.nr"},"52":{"source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n","path":"std/uint128.nr"},"55":{"source":"// docs:start:token_bridge_imports\n\n// Minimal implementation of the token bridge that can move funds between L1 <> L2.\n// The bridge has a corresponding Portal contract on L1 that it is attached to\n// And corresponds to a Token on L2 that uses the `AuthWit` accounts pattern.\n// Bridge has to be set as a minter on the token before it can be used\n\ncontract TokenBridge {\n    use dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PublicMutable, SharedImmutable};\n\n    use dep::token_portal_content_hash_lib::{get_mint_public_content_hash, get_mint_private_content_hash, get_withdraw_content_hash};\n\n    use dep::token::Token;\n    // docs:end:token_bridge_imports\n\n    // docs:start:token_bridge_storage_and_constructor\n    // Storage structure, containing all storage, and specifying what slots they use.\n    #[aztec(storage)]\n    struct Storage {\n        token: PublicMutable<AztecAddress>,\n        portal_address: SharedImmutable<EthAddress>,\n    }\n\n    // Constructs the contract.\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(token: AztecAddress, portal_address: EthAddress) {\n        storage.token.write(token);\n        storage.portal_address.initialize(portal_address);\n    }\n    // docs:end:token_bridge_storage_and_constructor\n\n    #[aztec(private)]\n    fn get_portal_address() -> EthAddress {\n        storage.portal_address.read_private()\n    }\n\n    #[aztec(public)]\n    fn get_portal_address_public() -> EthAddress {\n        storage.portal_address.read_public()\n    }\n\n    // docs:start:claim_public\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount publicly\n    #[aztec(public)]\n    fn claim_public(to: AztecAddress, amount: Field, secret: Field, message_leaf_index: Field) {\n        let content_hash = get_mint_public_content_hash(to, amount);\n\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret,\n            storage.portal_address.read_public(),\n            message_leaf_index\n        );\n\n        // Mint tokens\n        Token::at(storage.token.read()).mint_public(to, amount).call(&mut context);\n    }\n    // docs:end:claim_public\n\n    // docs:start:exit_to_l1_public\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message publicly\n    // Requires `msg.sender` to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(public)]\n    fn exit_to_l1_public(\n        recipient: EthAddress, // ethereum address to withdraw to\n        amount: Field,\n        caller_on_l1: EthAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient, amount, caller_on_l1);\n        context.message_portal(storage.portal_address.read_public(), content);\n\n        // Burn tokens\n        Token::at(storage.token.read()).burn_public(context.msg_sender(), amount, nonce).call(&mut context);\n    }\n    // docs:end:exit_to_l1_public\n    // docs:start:claim_private\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount in private assets\n    // User needs to call token.redeem_shield() to get the private assets\n    #[aztec(private)]\n    fn claim_private(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field // secret used to consume the L1 to L2 message\n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount);\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret_for_L1_to_L2_message_consumption,\n            storage.portal_address.read_private()\n        );\n\n        // Mint tokens on L2\n        // `mint_private` on token is public. So we call an internal public function\n        // which then calls the public method on the token contract.\n        // Since the secret_hash is passed, no secret is leaked.\n        TokenBridge::at(context.this_address())._call_mint_on_token(amount, secret_hash_for_redeeming_minted_notes).enqueue(&mut context);\n    }\n    // docs:end:claim_private\n\n    // docs:start:exit_to_l1_private\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message privately\n    // Requires `msg.sender` (caller of the method) to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(private)]\n    fn exit_to_l1_private(\n        token: AztecAddress,\n        recipient: EthAddress, // ethereum address to withdraw to\n        amount: Field,\n        caller_on_l1: EthAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient, amount, caller_on_l1);\n        context.message_portal(storage.portal_address.read_private(), content);\n\n        // docs:start:call_assert_token_is_same\n        // Assert that user provided token address is same as seen in storage.\n        TokenBridge::at(context.this_address())._assert_token_is_same(token).enqueue(&mut context);\n        // docs:end:call_assert_token_is_same\n\n        // Burn tokens\n        Token::at(token).burn(context.msg_sender(), amount, nonce).call(&mut context);\n    }\n    /// docs:end:exit_to_l1_private\n\n    // docs:start:get_token\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_token() -> AztecAddress {\n        storage.token.read()\n    }\n    // docs:end:get_token\n\n    // docs:start:call_mint_on_token\n    // This is a public call as we need to read from public storage.\n    // Also, note that user hashes their secret in private and only sends the hash in public\n    // meaning only user can `redeem_shield` at a later time with their secret.\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _call_mint_on_token(amount: Field, secret_hash: Field) {\n        Token::at(storage.token.read()).mint_private(amount, secret_hash).call(&mut context);\n    }\n    // docs:end:call_mint_on_token\n\n    // docs:start:assert_token_is_same\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _assert_token_is_same(token: AztecAddress) {\n        assert(storage.token.read().eq(token), \"Token address is not the same as seen in storage\");\n    }\n    // docs:end:assert_token_is_same\n}\n","path":"/home/josh/Documents/test/aztec-token-bridge/packages/aztec-contracts/token_bridge/src/main.nr"},"67":{"source":"use std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier);\n\n        // 2) Check that the witness we obtained matches the nullifier\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n        // 3) Compute the nullifier tree leaf\n        let nullifier_leaf = witness.leaf_preimage.hash();\n\n        // 4) Prove that the nullifier is in the nullifier tree\n        assert(\n            self.state.partial.nullifier_tree.root\n            == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n        // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n        //     was included in the nullifier tree.\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, N, M>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, N, M>(self, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M> {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr"},"71":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header { \n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_value_leaf_slot = pedersen_hash(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_value_leaf_slot\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n        let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"73":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"77":{"source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<let N: u32>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N as Field)\n}\n\nunconstrained fn storage_write<let N: u32>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<let N: u32>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<let N: u32>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"79":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            target: item.contract_address,\n            call_context: item.public_inputs.call_context,\n            function_data: item.function_data,\n            args_hash: item.public_inputs.args_hash,\n            returns_hash: item.public_inputs.returns_hash,\n            caller_context,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.get_compressed().hash());\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.get_compressed().hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"83":{"source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr"},"85":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"90":{"source":"use crate::{\n    hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness\n};\n\nuse std::merkle::compute_merkle_root;\nuse dep::protocol_types::{constants::L1_TO_L2_MSG_TREE_HEIGHT, address::{AztecAddress, EthAddress}, utils::arr_copy_slice};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_message_hash(\n        portal_contract_address,\n        chain_id,\n        storage_contract_address,\n        version,\n        content,\n        secret_hash\n    );\n\n    let returned_message = get_l1_to_l2_membership_witness(storage_contract_address, message_hash, secret);\n    let leaf_index = returned_message[0];\n    let sibling_path = arr_copy_slice(returned_message, [0; L1_TO_L2_MSG_TREE_HEIGHT], 1);\n\n    // Check that the message is in the tree\n    // This is implicitly checking that the values of the message are correct\n    let root = compute_merkle_root(message_hash, leaf_index, sibling_path);\n    assert(root == l1_to_l2_root, \"Message not in state\");\n\n    compute_message_nullifier(message_hash, secret, leaf_index)\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/messaging.nr"},"96":{"source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> Point {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if is_empty(key) {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> Point {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    Point { x: x_coordinate, y: y_coordinate, is_infinite: false }\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/keys/getters.nr"},"97":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"99":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"101":{"source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<let N: u32>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr"},"104":{"source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"108":{"source":"use dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, public_call_stack_item::PublicCallStackItem,\n    function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs,\n    call_context::CallContext, read_request::ReadRequest, note_hash::NoteHash, nullifier::Nullifier,\n    log_hash::LogHash, global_variables::GlobalVariables, gas::Gas\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    messaging::l2_to_l1_message::L2ToL1Message, header::Header, address::AztecAddress,\n    utils::reader::Reader,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n}\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn parse_public_call_stack_item_from_oracle(fields: [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH]) -> PublicCallStackItem {\n    let mut reader = Reader::new(fields);\n\n    // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n    // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n    // WARNING: if updating, see comment in public_call_stack_item.ts's PublicCallStackItem.hash()\n    let item = PublicCallStackItem {\n        contract_address: AztecAddress::from_field(reader.read()),\n        function_data: FunctionData { selector: FunctionSelector::from_field(reader.read()), is_private: false },\n        public_inputs: PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            args_hash: reader.read(),\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            end_side_effect_counter: 0,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0\n        },\n        is_execution_request: true\n    };\n    reader.finish();\n\n    item\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"112":{"source":"use dep::protocol_types::{address::AztecAddress};\n\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: u64 = 17;\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field\n) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field\n) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr"},"113":{"source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<let N: u32>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"115":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"116":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"119":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{compute_siloed_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    let header = context.get_header();\n    header.prove_nullifier_inclusion(init_nullifier);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    compute_siloed_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"131":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"138":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext}, oracle::storage::storage_read,\n    state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once. \n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr"},"157":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__INNER_NOTE_HASH,\n    hash::{\n    pedersen_hash, compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_inner_note_hash_from_preimage(storage_slot: Field, note_content_hash: Field) -> Field {\n    pedersen_hash(\n        [storage_slot, note_content_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\npub fn compute_inner_note_hash<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    compute_inner_note_hash_from_preimage(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, let N: u32, let M: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let (_, inner_nullifier) = note_with_header.compute_note_hash_and_nullifier(context);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\nfn compute_note_hash_for_read_request_from_innter_and_nonce(\n    inner_note_hash: Field,\n    nonce: Field\n) -> Field {\n    // TODO(#1386): This if-else can be nuked once we have nonces injected from public\n    if (nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        inner_note_hash\n    } else {\n        compute_unique_note_hash(nonce, inner_note_hash)\n    }\n}\n\npub fn compute_note_hash_for_read_request<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let inner_note_hash = compute_inner_note_hash(note);\n    let nonce = note.get_header().nonce;\n\n    compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, nonce)\n}\n\npub fn compute_note_hash_for_consumption<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        inner_note_hash\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, header.nonce);\n        compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let M: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n    let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, note_header.nonce);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        let (_, nullifier) = note.compute_note_hash_and_nullifier_without_context();\n        nullifier\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"164":{"source":"use crate::{\n    constants::{GENERATOR_INDEX__TX_CONTEXT, TX_CONTEXT_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    abis::gas_settings::GasSettings\n};\n\n// docs:start:tx-context\nstruct TxContext {\n    chain_id : Field,\n    version : Field,\n    gas_settings: GasSettings,\n}\n// docs:end:tx-context\n\nimpl TxContext {\n    pub fn new(chain_id: Field, version: Field, gas_settings: GasSettings) -> Self {\n        TxContext { chain_id, version, gas_settings }\n    }\n}\n\nimpl Eq for TxContext {\n    fn eq(self, other: Self) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.gas_settings.eq(other.gas_settings))\n    }\n}\n\nimpl Empty for TxContext {\n    fn empty() -> Self {\n        TxContext {\n            chain_id: 0,\n            version: 0,\n            gas_settings: GasSettings::empty(),\n        }\n    }\n}\n\nimpl Serialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn serialize(self) -> [Field; TX_CONTEXT_LENGTH] {\n        let mut fields: BoundedVec<Field, TX_CONTEXT_LENGTH> = BoundedVec::new();\n\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.extend_from_array(self.gas_settings.serialize());\n\n        assert_eq(fields.len(), TX_CONTEXT_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn deserialize(serialized: [Field; TX_CONTEXT_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let context = Self {\n            chain_id: reader.read(),\n            version: reader.read(),\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n        };\n\n        reader.finish();\n        context\n    }\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context = TxContext::empty();\n    let serialized = context.serialize();\n    let deserialized = TxContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let context = TxContext::empty();\n    let hash = context.hash();\n\n    // Value from tx_context.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x17e4357684c5a4349b4587c95b0b6161dcb4a3c5b02d4eb2ecc3b02c80193261;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/transaction/tx_context.nr"},"168":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"169":{"source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr"},"179":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr"},"180":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes = max_value.to_be_bytes(32);\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"181":{"source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"195":{"source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"200":{"source":"struct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u32 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr"},"202":{"source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr"},"204":{"source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x:fields[0], y: fields[1], is_infinite: fields[2] as bool},\n            sk_app: fields[3],\n        }\n    }\n}\n\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"205":{"source":"use crate::{\n    address::AztecAddress,\n    abis::validation_requests::{\n    key_validation_request::KeyValidationRequest,\n    scoped_key_validation_request_and_generator::ScopedKeyValidationRequestAndGenerator\n},\n    constants::KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct KeyValidationRequestAndGenerator {\n    request: KeyValidationRequest,\n    sk_app_generator: Field,\n}\n\nimpl Eq for KeyValidationRequestAndGenerator {\n    fn eq(self, other: KeyValidationRequestAndGenerator) -> bool {\n        (self.request == other.request) & (self.sk_app_generator == other.sk_app_generator)\n    }\n}\n\nimpl Empty for KeyValidationRequestAndGenerator {\n    fn empty() -> Self {\n        KeyValidationRequestAndGenerator {\n            request: KeyValidationRequest::empty(),\n            sk_app_generator: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH] {\n        array_concat(self.request.serialize(), [self.sk_app_generator])\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH]) -> Self {\n        let mut reader = Reader::new(fields);\n        let res = Self {\n            request: reader.read_struct(KeyValidationRequest::deserialize),\n            sk_app_generator: reader.read(),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl KeyValidationRequestAndGenerator {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedKeyValidationRequestAndGenerator {\n        ScopedKeyValidationRequestAndGenerator { request: self, contract_address }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = KeyValidationRequestAndGenerator::empty();\n    let serialized = item.serialize();\n    let deserialized = KeyValidationRequestAndGenerator::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request_and_generator.nr"},"209":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber, gas_settings::GasSettings,\n    validation_requests::KeyValidationRequestAndGenerator, note_hash::NoteHash, nullifier::Nullifier,\n    private_call_request::PrivateCallRequest, read_request::ReadRequest,\n    log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_L2_TO_L1_MSGS_PER_CALL, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    transaction::tx_context::TxContext, utils::arrays::validate_array\n};\n\nstruct PrivateCircuitPublicInputsArrayLengths {\n    note_hash_read_requests: u32,\n    nullifier_read_requests: u32,\n    key_validation_requests_and_generators: u32,\n    note_hashes: u32,\n    nullifiers: u32,\n    l2_to_l1_msgs: u32,\n    private_call_requests: u32,\n    public_call_stack_hashes: u32,\n    note_encrypted_logs_hashes: u32,\n    encrypted_logs_hashes: u32,\n    unencrypted_logs_hashes: u32,\n}\n\nimpl PrivateCircuitPublicInputsArrayLengths {\n    pub fn new(public_inputs: PrivateCircuitPublicInputs) -> Self {\n        PrivateCircuitPublicInputsArrayLengths {\n            note_hash_read_requests: validate_array(public_inputs.note_hash_read_requests),\n            nullifier_read_requests: validate_array(public_inputs.nullifier_read_requests),\n            key_validation_requests_and_generators: validate_array(public_inputs.key_validation_requests_and_generators),\n            note_hashes: validate_array(public_inputs.note_hashes),\n            nullifiers: validate_array(public_inputs.nullifiers),\n            l2_to_l1_msgs: validate_array(public_inputs.l2_to_l1_msgs),\n            private_call_requests: validate_array(public_inputs.private_call_requests),\n            public_call_stack_hashes: validate_array(public_inputs.public_call_stack_hashes),\n            note_encrypted_logs_hashes: validate_array(public_inputs.note_encrypted_logs_hashes),\n            encrypted_logs_hashes: validate_array(public_inputs.encrypted_logs_hashes),\n            unencrypted_logs_hashes: validate_array(public_inputs.unencrypted_logs_hashes)\n        }\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    key_validation_requests_and_generators: [KeyValidationRequestAndGenerator; MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    note_hashes: [NoteHash; MAX_NOTE_HASHES_PER_CALL],\n    nullifiers: [Nullifier; MAX_NULLIFIERS_PER_CALL],\n    private_call_requests: [PrivateCallRequest; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs: [L2ToL1Message; MAX_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    note_encrypted_logs_hashes: [NoteLogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n    encrypted_logs_hashes: [EncryptedLogHash; MAX_ENCRYPTED_LOGS_PER_CALL],\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The chain_id and version here are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    tx_context: TxContext,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.min_revertible_side_effect_counter == other.min_revertible_side_effect_counter) &\n        (self.is_fee_payer == other.is_fee_payer) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.key_validation_requests_and_generators == other.key_validation_requests_and_generators) &\n        (self.note_hashes == other.note_hashes) &\n        (self.nullifiers == other.nullifiers) &\n        (self.private_call_requests == other.private_call_requests) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.l2_to_l1_msgs == other.l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.note_encrypted_logs_hashes == other.note_encrypted_logs_hashes) &\n        (self.encrypted_logs_hashes == other.encrypted_logs_hashes) &\n        (self.unencrypted_logs_hashes == other.unencrypted_logs_hashes) &\n        self.historical_header.eq(other.historical_header) &\n        self.tx_context.eq(other.tx_context)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n        fields.push(if self.is_fee_payer { 1 } else { 0 } as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..self.note_hash_read_requests.len() {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..self.nullifier_read_requests.len() {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..self.key_validation_requests_and_generators.len() {\n            fields.extend_from_array(self.key_validation_requests_and_generators[i].serialize());\n        }\n        for i in 0..self.note_hashes.len() {\n            fields.extend_from_array(self.note_hashes[i].serialize());\n        }\n        for i in 0..self.nullifiers.len() {\n            fields.extend_from_array(self.nullifiers[i].serialize());\n        }\n        for i in 0..self.private_call_requests.len() {\n            fields.extend_from_array(self.private_call_requests[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.push(self.public_teardown_function_hash);\n        for i in 0..self.l2_to_l1_msgs.len() {\n            fields.extend_from_array(self.l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        for i in 0..self.note_encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.note_encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.unencrypted_logs_hashes.len() {\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.tx_context.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            is_fee_payer: reader.read() == 1,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            key_validation_requests_and_generators: reader.read_struct_array(KeyValidationRequestAndGenerator::deserialize, [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL]),\n            nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL]),\n            private_call_requests: reader.read_struct_array(PrivateCallRequest::deserialize, [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            public_teardown_function_hash: reader.read(),\n            l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            note_encrypted_logs_hashes: reader.read_struct_array(NoteLogHash::deserialize, [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL]),\n            encrypted_logs_hashes: reader.read_struct_array(EncryptedLogHash::deserialize, [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL]),\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            tx_context: reader.read_struct(TxContext::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            key_validation_requests_and_generators: [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            private_call_requests: [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            note_encrypted_logs_hashes: [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n            encrypted_logs_hashes: [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL],\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            tx_context: TxContext::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x15c9b0a92b9b541598e24c9f0b0b4b04b7f2408599751c45aa12de671fd9b363;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr"},"210":{"source":"use crate::abis::{call_context::CallContext, function_data::FunctionData, gas::Gas};\nuse crate::address::AztecAddress;\nuse crate::constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH};\nuse crate::traits::{Hash, Empty, Serialize, Deserialize};\nuse crate::utils::reader::Reader;\n\n/**\n * A compressed version of the PublicCallStackItem struct used to compute the \"hash\"\n * of a PublicCallStackItem.\n * \n * Historically, we have been zeroing most values in the PublicCallStackItem struct\n * to compute the hash involved when adding a PublicCallStackItem to the PublicCallStack.\n * \n * This struct is used to store the values that we did not zero out, and allow us to hash\n * only these, thereby skipping a lot of computation and saving us a lot of constraints\n * \n * Essentially this struct exists such that we don't have a `hash` function in the \n * PublicCallStackItem struct that practically throws away some values of the struct\n * without clearly indicating that it does so.\n */\nstruct PublicCallStackItemCompressed {\n    contract_address: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    revert_code: u8,\n    start_gas_left: Gas,\n    end_gas_left: Gas,\n}\n\nimpl Eq for PublicCallStackItemCompressed {\n    fn eq(self, other: PublicCallStackItemCompressed) -> bool {\n        (self.contract_address == other.contract_address)\n            & (self.call_context == other.call_context)\n            & (self.function_data == other.function_data)\n            & (self.args_hash == other.args_hash)\n            & (self.returns_hash == other.returns_hash)\n            & (self.revert_code == other.revert_code)\n            & (self.start_gas_left == other.start_gas_left)\n            & (self.end_gas_left == other.end_gas_left)\n    }\n}\n\nimpl Hash for PublicCallStackItemCompressed {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash_with_separator(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PublicCallStackItemCompressed {\n    fn empty() -> Self {\n        PublicCallStackItemCompressed {\n            contract_address: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n    fn serialize(self) -> [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.start_gas_left.serialize());\n        fields.extend_from_array(self.end_gas_left.serialize());\n\n        assert_eq(fields.len(), PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n  fn deserialize(fields: [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH]) -> PublicCallStackItemCompressed {\n    let mut reader = Reader::new(fields);\n\n    let item = PublicCallStackItemCompressed {\n      contract_address: reader.read_struct(AztecAddress::deserialize),\n      call_context: reader.read_struct(CallContext::deserialize),\n      function_data: reader.read_struct(FunctionData::deserialize),\n      args_hash: reader.read(),\n      returns_hash: reader.read(),\n      revert_code: reader.read() as u8,\n      start_gas_left: reader.read_struct(Gas::deserialize),\n      end_gas_left: reader.read_struct(Gas::deserialize),\n    };\n    reader.finish();\n    item\n  }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item_compressed.nr"},"212":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"214":{"source":"use crate::address::AztecAddress;\nuse crate::traits::{Empty, Serialize, Deserialize};\nuse crate::constants::CALLER_CONTEXT_LENGTH;\nuse crate::utils::reader::Reader;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n    is_static_call: bool,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, other: CallerContext) -> bool {\n        other.msg_sender.eq(self.msg_sender)\n            & other.storage_contract_address.eq(self.storage_contract_address)\n            & other.is_static_call == self.is_static_call\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n            is_static_call: false,\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero() & !self.is_static_call\n    }\n\n    // Different to an empty context, a hidden context won't reveal the caller's msg_sender and storage_contract_address,\n    // but will still propagate the is_static_call flag.\n    pub fn is_hidden(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nimpl Serialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn serialize(self) -> [Field; CALLER_CONTEXT_LENGTH] {\n    let mut fields: BoundedVec<Field, CALLER_CONTEXT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array(self.msg_sender.serialize());\n    fields.extend_from_array(self.storage_contract_address.serialize());\n    fields.push(self.is_static_call as Field);\n\n    assert_eq(fields.len(), CALLER_CONTEXT_LENGTH);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn deserialize(fields: [Field; CALLER_CONTEXT_LENGTH]) -> CallerContext {\n    let mut reader = Reader::new(fields);\n\n    let item = CallerContext {\n      msg_sender: reader.read_struct(AztecAddress::deserialize),\n      storage_contract_address: reader.read_struct(AztecAddress::deserialize),\n      is_static_call: reader.read_bool(),\n    };\n    reader.finish();\n    item\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = CallerContext::empty();\n    let serialized = item.serialize();\n    let deserialized = CallerContext::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/caller_context.nr"},"215":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{GAS_LENGTH, FIXED_DA_GAS, FIXED_L2_GAS}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader,\n    abis::gas_fees::GasFees\n};\nuse std::ops::{Add, Sub};\n\nstruct Gas {\n    da_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l2_gas }\n    }\n\n    pub fn tx_overhead() -> Self {\n        Self { da_gas: FIXED_DA_GAS, l2_gas: FIXED_L2_GAS }\n    }\n\n    pub fn compute_fee(self, fees: GasFees) -> Field {\n        (self.da_gas as Field) * fees.fee_per_da_gas + (self.l2_gas as Field) * fees.fee_per_l2_gas\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.da_gas == 0) & (self.l2_gas == 0)\n    }\n\n    pub fn within(self, limits: Gas) -> bool {\n        (self.da_gas <= limits.da_gas) & (self.l2_gas <= limits.l2_gas)\n    }\n}\n\nimpl Add for Gas {\n    fn add(self, other: Gas) -> Self {\n        Gas::new(self.da_gas + other.da_gas, self.l2_gas + other.l2_gas)\n    }\n}\n\nimpl Sub for Gas {\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(self.da_gas - other.da_gas, self.l2_gas - other.l2_gas)\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Gas::empty();\n    let serialized = item.serialize();\n    let deserialized = Gas::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr"},"219":{"source":"use crate::{\n    abis::side_effect::{Ordered, Scoped}, traits::{Empty, Serialize, Deserialize},\n    address::AztecAddress, constants::{READ_REQUEST_LENGTH, SCOPED_READ_REQUEST_LEN},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for ReadRequest {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedReadRequest {\n        ScopedReadRequest { read_request: self, contract_address }\n    }\n}\n\nstruct ScopedReadRequest {\n    read_request: ReadRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<ReadRequest> for ScopedReadRequest {\n    fn inner(self) -> ReadRequest {\n        self.read_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ScopedReadRequest {\n    fn eq(self, other: ScopedReadRequest) -> bool {\n        (self.read_request == other.read_request)\n        & (self.contract_address.eq(other.contract_address))\n    }\n}\n\nimpl Empty for ScopedReadRequest {\n    fn empty() -> Self {\n        ScopedReadRequest {\n            read_request: ReadRequest::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn serialize(self) -> [Field; SCOPED_READ_REQUEST_LEN] {\n        array_concat(self.read_request.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn deserialize(values: [Field; SCOPED_READ_REQUEST_LEN]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            read_request: reader.read_struct(ReadRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedReadRequest {\n    pub fn value(self) -> Field {\n        self.read_request.value\n    }\n    pub fn counter(self) -> u32 {\n        self.read_request.counter\n    }\n}\n\n#[test]\nfn serialization_of_empty_read() {\n    let item = ReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr"},"223":{"source":"use crate::{\n    abis::{side_effect::{Ordered, OrderedValue, Readable, Scoped}, read_request::ScopedReadRequest},\n    address::AztecAddress, constants::{NULLIFIER_LENGTH, SCOPED_NULLIFIER_LENGTH},\n    hash::compute_siloed_nullifier, traits::{Empty, Hash, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct Nullifier {\n    value: Field,\n    counter: u32,\n    note_hash: Field,\n}\n\nimpl Ordered for Nullifier {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for Nullifier {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for Nullifier {\n    fn eq(self, other: Nullifier) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.note_hash == other.note_hash) \n    }\n}\n\nimpl Empty for Nullifier {\n    fn empty() -> Self {\n        Nullifier {\n            value: 0,\n            counter: 0,\n            note_hash: 0,\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_LENGTH> for Nullifier {\n    fn serialize(self) -> [Field; NULLIFIER_LENGTH] {\n        [self.value, self.counter as Field, self.note_hash]\n    }\n}\n\nimpl Deserialize<NULLIFIER_LENGTH> for Nullifier {\n    fn deserialize(values: [Field; NULLIFIER_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            note_hash: values[2],\n        }\n    }\n}\n\nimpl Readable for Nullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        // Public kernels output Nullifier instead of ScopedNullifier.\n        // The nullifier value has been siloed.\n        let siloed_request_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.value, siloed_request_value, \"Value of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl Nullifier {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNullifier {\n        ScopedNullifier { nullifier: self, contract_address }\n    }\n}\n\nstruct ScopedNullifier {\n    nullifier: Nullifier,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<Nullifier> for ScopedNullifier {\n    fn inner(self) -> Nullifier {\n        self.nullifier\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNullifier {\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNullifier {\n    fn value(self) -> Field {\n        self.nullifier.value\n    }\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl Eq for ScopedNullifier {\n    fn eq(self, other: ScopedNullifier) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedNullifier {\n    fn empty() -> Self {\n        ScopedNullifier {\n            nullifier: Nullifier::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn serialize(self) -> [Field; SCOPED_NULLIFIER_LENGTH] {\n        array_concat(self.nullifier.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn deserialize(values: [Field; SCOPED_NULLIFIER_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            nullifier: reader.read_struct(Nullifier::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.nullifier.value, read_request.value(), \"Value of the nullifier does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.nullifier.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl ScopedNullifier {\n    pub fn nullified_note_hash(self) -> Field {\n        self.nullifier.note_hash\n    }\n\n    pub fn expose_to_public(self) -> Nullifier {\n        // Hide the actual counter and note hash when exposing it to the public kernel.\n        Nullifier { value: self.nullifier.value, counter: 0, note_hash: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Nullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = Nullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier.nr"},"225":{"source":"use crate::{\n    abis::read_request::ScopedReadRequest, address::AztecAddress,\n    abis::side_effect::{Ordered, OrderedValue, Readable, Scoped},\n    constants::{NOTE_HASH_LENGTH, SCOPED_NOTE_HASH_LENGTH}, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct NoteHash {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for NoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteHash {\n    fn eq(self, other: NoteHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter) \n    }\n}\n\nimpl Empty for NoteHash {\n    fn empty() -> Self {\n        NoteHash {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn serialize(self) -> [Field; NOTE_HASH_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn deserialize(values: [Field; NOTE_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl NoteHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNoteHash {\n        ScopedNoteHash { note_hash: self, contract_address }\n    }\n}\n\nstruct ScopedNoteHash {\n    note_hash: NoteHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<NoteHash> for ScopedNoteHash {\n    fn inner(self) -> NoteHash {\n        self.note_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNoteHash {\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNoteHash {\n    fn value(self) -> Field {\n        self.note_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl Eq for ScopedNoteHash {\n    fn eq(self, other: ScopedNoteHash) -> bool {\n        (self.note_hash == other.note_hash)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedNoteHash {\n    fn empty() -> Self {\n        ScopedNoteHash {\n            note_hash: NoteHash::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn serialize(self) -> [Field; SCOPED_NOTE_HASH_LENGTH] {\n        array_concat(self.note_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn deserialize(values: [Field; SCOPED_NOTE_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            note_hash: reader.read_struct(NoteHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNoteHash {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.note_hash.value, read_request.value(), \"Value of the note hash does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the note hash does not match read request\");\n        assert(\n            read_request.counter() > self.note_hash.counter, \"Read request counter must be greater than the counter of the note hash\"\n        );\n    }\n}\n\nimpl ScopedNoteHash {\n    pub fn expose_to_public(self) -> NoteHash {\n        // Hide the actual counter when exposing it to the public kernel.\n        NoteHash { value: self.note_hash.value, counter: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = NoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/note_hash.nr"},"227":{"source":"use crate::{\n    abis::{\n    private_call_stack_item::PrivateCallStackItem, call_context::CallContext,\n    function_data::FunctionData, caller_context::CallerContext,\n    side_effect::{Ordered, RangeOrdered, Scoped}\n},\n    address::AztecAddress, constants::{PRIVATE_CALL_REQUEST_LENGTH, SCOPED_PRIVATE_CALL_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PrivateCallRequest {\n    target: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Ordered for PrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.start_side_effect_counter\n    }\n}\n\nimpl RangeOrdered for PrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.start_side_effect_counter\n    }\n    fn counter_end(self) -> u32 {\n        self.end_side_effect_counter\n    }\n}\n\nimpl Eq for PrivateCallRequest {\n    fn eq(self, other: PrivateCallRequest) -> bool {\n        (self.target == other.target) \n            & (self.call_context == other.call_context) \n            & (self.function_data == other.function_data) \n            & (self.args_hash == other.args_hash) \n            & (self.returns_hash == other.returns_hash)\n            & (self.caller_context == other.caller_context)\n            & (self.start_side_effect_counter == other.start_side_effect_counter)\n            & (self.end_side_effect_counter == other.end_side_effect_counter)\n    }\n}\n\nimpl Empty for PrivateCallRequest {\n    fn empty() -> Self {\n        PrivateCallRequest {\n            target: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn serialize(self) -> [Field; PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.push(self.target.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.extend_from_array(self.caller_context.serialize());\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        assert_eq(fields.len(), PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn deserialize(fields: [Field; PRIVATE_CALL_REQUEST_LENGTH]) -> PrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = PrivateCallRequest {\n            target: reader.read_struct(AztecAddress::deserialize),\n            call_context: reader.read_struct(CallContext::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            caller_context: reader.read_struct(CallerContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            end_side_effect_counter: reader.read_u32(),\n        };\n        reader.finish();\n        item\n    }\n}\n\nimpl PrivateCallRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedPrivateCallRequest {\n        ScopedPrivateCallRequest { call_request: self, contract_address }\n    }\n\n    pub fn matches_stack_item(self, stack_item: PrivateCallStackItem) -> bool {\n        (self.target == stack_item.contract_address)\n            & (self.call_context == stack_item.public_inputs.call_context)\n            & (self.function_data == stack_item.function_data)\n            & (self.args_hash == stack_item.public_inputs.args_hash)\n            & (self.returns_hash == stack_item.public_inputs.returns_hash)\n            & (self.start_side_effect_counter\n                                == stack_item.public_inputs.start_side_effect_counter)\n            & (self.end_side_effect_counter\n                                    == stack_item.public_inputs.end_side_effect_counter)\n    }\n}\n\nstruct ScopedPrivateCallRequest {\n    call_request: PrivateCallRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<PrivateCallRequest> for ScopedPrivateCallRequest {\n    fn inner(self) -> PrivateCallRequest {\n        self.call_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedPrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.call_request.counter_start()\n    }\n}\n\nimpl RangeOrdered for ScopedPrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.call_request.counter_start()\n    }\n    fn counter_end(self) -> u32 {\n        self.call_request.counter_end()\n    }\n}\n\nimpl Eq for ScopedPrivateCallRequest {\n    fn eq(self, other: ScopedPrivateCallRequest) -> bool {\n        (self.call_request == other.call_request)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedPrivateCallRequest {\n    fn empty() -> Self {\n        ScopedPrivateCallRequest {\n            call_request: PrivateCallRequest::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn serialize(self) -> [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, SCOPED_PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.call_request.serialize());\n        fields.extend_from_array(self.contract_address.serialize());\n\n        assert_eq(fields.len(), SCOPED_PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn deserialize(fields: [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH]) -> ScopedPrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = ScopedPrivateCallRequest {\n            call_request: reader.read_struct(PrivateCallRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        item\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = ScopedPrivateCallRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedPrivateCallRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_request.nr"},"228":{"source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x065f2831db9ac0db5e710bd3a865b5facd8cf83f1585e1af8fd1d6ce9c47f685;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr"},"233":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr"},"246":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n  fn eq(self, other: Self) -> bool {\n    (self.nullifier == other.nullifier) &\n    (self.next_nullifier == other.next_nullifier) &\n    (self.next_index == other.next_index)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"248":{"source":"use crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr"},"250":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n}\n// docs:end:call-context\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"251":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    abis::gas_fees::GasFees,\n    constants::{\n    GAS_SETTINGS_LENGTH, DEFAULT_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_MAX_FEE_PER_GAS,\n    DEFAULT_INCLUSION_FEE\n},\n    hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    utils::reader::Reader\n};\n\nstruct GasSettings {\n    gas_limits: Gas,\n    teardown_gas_limits: Gas,\n    max_fees_per_gas: GasFees,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    pub fn new(\n        gas_limits: Gas,\n        teardown_gas_limits: Gas,\n        max_fees_per_gas: GasFees,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { gas_limits, teardown_gas_limits, max_fees_per_gas, inclusion_fee }\n    }\n\n    pub fn default() -> Self {\n        GasSettings::new(\n            Gas::new(DEFAULT_GAS_LIMIT, DEFAULT_GAS_LIMIT),\n            Gas::new(DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT),\n            GasFees::new(DEFAULT_MAX_FEE_PER_GAS, DEFAULT_MAX_FEE_PER_GAS),\n            DEFAULT_INCLUSION_FEE\n        )\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limits == other.gas_limits) & (self.teardown_gas_limits == other.teardown_gas_limits) & (self.max_fees_per_gas == other.max_fees_per_gas) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            Gas::empty(), Gas::empty(), GasFees::empty(), 0\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.gas_limits.serialize());\n        serialized.extend_from_array(self.teardown_gas_limits.serialize());\n        serialized.extend_from_array(self.max_fees_per_gas.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings::new(reader.read_struct(Gas::deserialize), reader.read_struct(Gas::deserialize), reader.read_struct(GasFees::deserialize), reader.read())\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasSettings::empty();\n    let serialized = item.serialize();\n    let deserialized = GasSettings::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr"},"252":{"source":"use crate::{\n    abis::side_effect::{Ordered, OrderedValue, Scoped}, address::AztecAddress,\n    constants::{\n    LOG_HASH_LENGTH, NOTE_LOG_HASH_LENGTH, ENCRYPTED_LOG_HASH_LENGTH, SCOPED_LOG_HASH_LENGTH,\n    SCOPED_ENCRYPTED_LOG_HASH_LENGTH\n},\n    traits::{Empty, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n}\n\nimpl Ordered for LogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for LogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for LogHash {\n    fn eq(self, other: LogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n    }\n}\n\nimpl Empty for LogHash {\n    fn empty() -> Self {\n        LogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n        }\n    }\n}\n\nimpl Serialize<LOG_HASH_LENGTH> for LogHash {\n    fn serialize(self) -> [Field; LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length]\n    }\n}\n\nimpl Deserialize<LOG_HASH_LENGTH> for LogHash {\n    fn deserialize(values: [Field; LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n        }\n    }\n}\n\nimpl LogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedLogHash {\n        ScopedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedLogHash {\n    log_hash: LogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<LogHash> for ScopedLogHash {\n    fn inner(self) -> LogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedLogHash {\n    fn eq(self, other: ScopedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedLogHash {\n    fn empty() -> Self {\n        ScopedLogHash {\n            log_hash: LogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn serialize(self) -> [Field; SCOPED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn deserialize(values: [Field; SCOPED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(LogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedLogHash {\n    pub fn expose_to_public(self) -> Self {\n        // Hide the counter when exposing to public.\n        Self {\n            log_hash: LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length },\n            contract_address: self.contract_address\n        }\n    }\n}\n\nstruct EncryptedLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Ordered for EncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for EncryptedLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for EncryptedLogHash {\n    fn eq(self, other: EncryptedLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.randomness == other.randomness) \n    }\n}\n\nimpl Empty for EncryptedLogHash {\n    fn empty() -> Self {\n        EncryptedLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            randomness: 0,\n        }\n    }\n}\n\nimpl Serialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn serialize(self) -> [Field; ENCRYPTED_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.randomness]\n    }\n}\n\nimpl Deserialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn deserialize(values: [Field; ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            randomness: values[3],\n        }\n    }\n}\n\nimpl EncryptedLogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedEncryptedLogHash {\n        ScopedEncryptedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedEncryptedLogHash {\n    log_hash: EncryptedLogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<EncryptedLogHash> for ScopedEncryptedLogHash {\n    fn inner(self) -> EncryptedLogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl ScopedEncryptedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the secret randomness and counter when exposing to public\n        // Expose as a LogHash rather than EncryptedLogHash to avoid bringing an unnec. 0 value around\n        // The log hash will already be silo'd when we call this\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nimpl Ordered for ScopedEncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedEncryptedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedEncryptedLogHash {\n    fn eq(self, other: ScopedEncryptedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedEncryptedLogHash {\n    fn empty() -> Self {\n        ScopedEncryptedLogHash {\n            log_hash: EncryptedLogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn serialize(self) -> [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn deserialize(values: [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(EncryptedLogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct NoteLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    note_hash_counter: u32,\n}\n\nimpl NoteLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the actual counter and note hash counter when exposing it to the public kernel.\n        // The counter is usually note_hash.counter + 1, so it can be revealing.\n        // Expose as a LogHash rather than NoteLogHash to avoid bringing an unnec. 0 value around\n        LogHash { value: self.value, counter: 0, length: self.length }\n    }\n}\n\nimpl Ordered for NoteLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for NoteLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteLogHash {\n    fn eq(self, other: NoteLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.note_hash_counter == other.note_hash_counter) \n    }\n}\n\nimpl Empty for NoteLogHash {\n    fn empty() -> Self {\n        NoteLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            note_hash_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn serialize(self) -> [Field; NOTE_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.note_hash_counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn deserialize(values: [Field; NOTE_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            note_hash_counter: values[3] as u32,\n        }\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/log_hash.nr"},"253":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        (self.is_private == other.is_private)\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false\n        }\n    }\n\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty function data hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"256":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"257":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"270":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"271":{"source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  num_txs: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.num_txs);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let num_txs = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      num_txs,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      num_txs: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.num_txs == other.num_txs)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr"},"276":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"285":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr"},"286":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr"},"288":{"source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/header.nr"},"290":{"source":"use crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{L2_TO_L1_MESSAGE_LENGTH, SCOPED_L2_TO_L1_MESSAGE_LENGTH},\n    abis::side_effect::{Ordered, Scoped}, traits::{Deserialize, Empty, Serialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n    counter: u32,\n}\n\nimpl Ordered for L2ToL1Message {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content) & (self.counter == other.counter)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content, self.counter as Field]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\nimpl L2ToL1Message {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedL2ToL1Message {\n        ScopedL2ToL1Message { message: self, contract_address }\n    }\n}\n\nstruct ScopedL2ToL1Message {\n    message: L2ToL1Message,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<L2ToL1Message> for ScopedL2ToL1Message {\n    fn inner(self) -> L2ToL1Message {\n        self.message\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedL2ToL1Message {\n    fn counter(self) -> u32 {\n        self.message.counter\n    }\n}\n\nimpl Eq for ScopedL2ToL1Message {\n    fn eq(self, other: ScopedL2ToL1Message) -> bool {\n        (self.message == other.message)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedL2ToL1Message {\n    fn empty() -> Self {\n        ScopedL2ToL1Message {\n            message: L2ToL1Message::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn serialize(self) -> [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH] {\n        array_concat(self.message.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn deserialize(values: [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            message: reader.read_struct(L2ToL1Message::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\n#[test]\nfn serialization_of_empty_l2() {\n    let item = L2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = L2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped_l2() {\n    let item = ScopedL2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedL2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr"},"301":{"source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n\ncontract Token {\n    // Libs\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        hash::compute_secret_hash,\n        prelude::{NoteGetterOptions, Map, PublicMutable, SharedImmutable, PrivateSet, AztecAddress},\n        encrypted_logs::{\n        encrypted_note_emission::{\n        encode_and_encrypt_note, encode_and_encrypt_note_with_keys,\n        encode_and_encrypt_note_with_keys_unconstrained\n    },\n        encrypted_event_emission::{encode_and_encrypt_event, encode_and_encrypt_event_with_keys_unconstrained}\n    }\n    };\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{assert_current_call_valid_authwit, assert_current_call_valid_authwit_public, compute_authwit_nullifier};\n    // docs:end:import_authwit\n\n    use crate::types::{transparent_note::TransparentNote, token_note::{TokenNote, TOKEN_NOTE_LEN}, balances_map::BalancesMap};\n    // docs:end::imports\n\n    #[aztec(event)]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    // docs:start:storage_struct\n    #[aztec(storage)]\n    struct Storage {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool>>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: BalancesMap<TokenNote>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128>,\n        // docs:start:storage_pending_shields\n        pending_shields: PrivateSet<TransparentNote>,\n        // docs:end:storage_pending_shields\n        public_balances: Map<AztecAddress, PublicMutable<U128>>,\n        symbol: SharedImmutable<FieldCompressedString>,\n        name: SharedImmutable<FieldCompressedString>,\n        // docs:start:storage_decimals\n        decimals: SharedImmutable<u8>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[aztec(public)]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_public\n        storage.decimals.read_public()\n        // docs:end:read_decimals_public\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_private\n        storage.decimals.read_private()\n        // docs:end:read_decimals_private\n    }\n\n    // docs:start:admin\n    #[aztec(public)]\n    #[aztec(view)]\n    fn admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[aztec(public)]\n    #[aztec(view)]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[aztec(public)]\n    #[aztec(view)]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[aztec(public)]\n    #[aztec(view)]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[aztec(public)]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_public\n    #[aztec(public)]\n    fn mint_public(to: AztecAddress, amount: Field) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let amount = U128::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_public\n\n    // docs:start:mint_private\n    #[aztec(public)]\n    fn mint_private(amount: Field, secret_hash: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount, secret_hash);\n        let supply = storage.total_supply.read().add(U128::from_integer(amount));\n\n        storage.total_supply.write(supply);\n        // docs:start:insert_from_public\n        pending_shields.insert_from_public(&mut note);\n        // docs:end:insert_from_public\n    }\n    // docs:end:mint_private\n\n    // TODO: Nuke this - test functions do not belong to token contract!\n    #[aztec(private)]\n    fn privately_mint_private_note(amount: Field) {\n        let caller = context.msg_sender();\n        storage.balances.add(caller, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, caller, caller));\n\n        Token::at(context.this_address()).assert_minter_and_mint(context.msg_sender(), amount).enqueue(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn assert_minter_and_mint(minter: AztecAddress, amount: Field) {\n        assert(storage.minters.at(minter).read(), \"caller is not minter\");\n        let supply = storage.total_supply.read() + U128::from_integer(amount);\n        storage.total_supply.write(supply);\n    }\n\n    // docs:start:shield\n    #[aztec(public)]\n    fn shield(from: AztecAddress, amount: Field, secret_hash: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            // The redeem is only spendable once, so we need to ensure that you cannot insert multiple shields from the same message.\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount.to_field(), secret_hash);\n\n        storage.public_balances.at(from).write(from_balance);\n        pending_shields.insert_from_public(&mut note);\n    }\n    // docs:end:shield\n\n    // docs:start:transfer_public\n    #[aztec(public)]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_public\n\n    // docs:start:burn_public\n    #[aztec(public)]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:redeem_shield\n    #[aztec(private)]\n    fn redeem_shield(to: AztecAddress, amount: Field, secret: Field) {\n        let pending_shields = storage.pending_shields;\n        let secret_hash = compute_secret_hash(secret);\n        // Get 1 note (set_limit(1)) which has amount stored in field with index 0 (select(0, amount)) and secret_hash\n        // stored in field with index 1 (select(1, secret_hash)).\n        let mut options = NoteGetterOptions::new();\n        options = options.select(TransparentNote::properties().amount, amount, Option::none()).select(\n            TransparentNote::properties().secret_hash,\n            secret_hash,\n            Option::none()\n        ).set_limit(1);\n        let notes = pending_shields.get_notes(options);\n        let note = notes.get_unchecked(0);\n        // Remove the note from the pending shields set\n        pending_shields.remove(note);\n\n        // Add the token note to user's balances set\n        // Note: Using context.msg_sender() as a sender below makes this incompatible with escrows because we send\n        // outgoing logs to that address and to send outgoing logs you need to get a hold of ovsk_m.\n        let from = context.msg_sender();\n        storage.balances.add(to, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, to));\n    }\n    // docs:end:redeem_shield\n\n    // docs:start:unshield\n    #[aztec(private)]\n    fn unshield(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:unshield\n\n    // docs:start:transfer\n    #[aztec(private)]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n\n        // By fetching the keys here, we can avoid doing an extra read from the storage, since from_ovpk would\n        // be needed twice.\n        let header = context.get_header();\n        let from_ovpk = header.get_ovpk_m(&mut context, from);\n        let from_ivpk = header.get_ivpk_m(&mut context, from);\n        let to_ivpk = header.get_ivpk_m(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_ovpk, from_ivpk, from));\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_ovpk, to_ivpk, to));\n\n        Transfer { from, to, amount: amount.to_field() }.emit(encode_and_encrypt_event_with_keys_unconstrained(&mut context, from_ovpk, to_ivpk, to));\n    }\n    // docs:end:transfer\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[aztec(private)]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier, 0);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_from\n    #[aztec(private)]\n    fn transfer_from(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        // By fetching the keys here, we can avoid doing an extra read from the storage, since from_ovpk would\n        // be needed twice.\n        let header = context.get_header();\n        let from_ovpk = header.get_ovpk_m(&mut context, from);\n        let from_ivpk = header.get_ivpk_m(&mut context, from);\n        let to_ivpk = header.get_ivpk_m(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_ovpk, from_ivpk, from));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_ovpk, to_ivpk, to));\n    }\n    // docs:end:transfer_from\n\n    // docs:start:burn\n    #[aztec(private)]\n    fn burn(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn\n\n    /// Internal ///\n\n    // docs:start:increase_public_balance\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _increase_public_balance(to: AztecAddress, amount: Field) {\n        let new_balance = storage.public_balances.at(to).read().add(U128::from_integer(amount));\n        storage.public_balances.at(to).write(new_balance);\n    }\n    // docs:end:increase_public_balance\n\n    // docs:start:reduce_total_supply\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _reduce_total_supply(amount: Field) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n\n    // docs:start:balance_of_private\n    unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.balances.balance_of(owner).to_field()\n    }\n    // docs:end:balance_of_private\n}\n// docs:end:token_all","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-contracts/contracts/token_contract/src/main.nr"},"304":{"source":"use dep::aztec::{\n    prelude::{AztecAddress, NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash},\n    note::utils::compute_note_hash_for_consumption, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\n// TOKEN_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TOKEN_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n#[aztec(note)]\nstruct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NoteInterface<TOKEN_NOTE_LEN, TOKEN_NOTE_BYTES_LEN> for TokenNote {\n    // docs:start:nullifier\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n    // docs:end:nullifier\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self {\n            amount,\n            npk_m_hash: owner_npk_m_hash,\n            randomness: unsafe_rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) &\n        (self.npk_m_hash == other.npk_m_hash) &\n        (self.randomness == other.randomness)\n    }\n}\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr"},"305":{"source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{note_getter_options::PropertySelector, utils::compute_note_hash_for_consumption},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash}\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n// TRANSPARENT_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TRANSPARENT_NOTE_BYTES_LEN: Field = 2 * 32 + 64;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[aztec(note)]\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nstruct TransparentNoteProperties {\n    amount: PropertySelector,\n    secret_hash: PropertySelector,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN, TRANSPARENT_NOTE_BYTES_LEN> for TransparentNote {\n\n    // Custom serialization to avoid disclosing the secret field\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    // Custom deserialization since we don't have access to the secret plaintext\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): Ensure nullifier collisions are prevented\n    fn compute_note_hash_and_nullifier(self, _context: &mut PrivateContext) -> (Field, Field) {\n        self.compute_note_hash_and_nullifier_without_context()\n    }\n\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit. \n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n    // Custom serialization forces us to manually create the metadata struct and its getter\n    pub fn properties() -> TransparentNoteProperties {\n        TransparentNoteProperties {\n            amount: PropertySelector { index: 0, offset: 0, length: 32 },\n            secret_hash: PropertySelector { index: 1, offset: 0, length: 32 }\n        }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr"},"318":{"source":"// docs:start:mint_public_content_hash_nr\nuse dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner: AztecAddress, amount: Field) -> Field {\n    let mut hash_bytes = [0; 68];\n    let recipient_bytes = owner.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0x3e87b9be keccak256('mint_public(bytes32,uint256)')\n    hash_bytes[0] = 0x3e;\n    hash_bytes[1] = 0x87;\n    hash_bytes[2] = 0xb9;\n    hash_bytes[3] = 0xbe;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(\n    secret_hash_for_redeeming_minted_notes: Field,\n    amount: Field\n) -> Field {\n    let mut hash_bytes = [0; 68];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0xefa012c1 keccak256('mint_private(bytes32,uint256)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xa0;\n    hash_bytes[2] = 0x12;\n    hash_bytes[3] = 0xc1;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: EthAddress, amount: Field, caller_on_l1: EthAddress) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let caller_on_l1_bytes = caller_on_l1.to_field().to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = caller_on_l1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n","path":"/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.0/noir-projects/noir-contracts/contracts/token_portal_content_hash_lib/src/lib.nr"}}}